cd(@__DIR__)
using Pkg
Pkg.activate(".")

using Flux: gradient
using LinearAlgebra
using Random
using RobustNeuralNetworks


# DirectRENParams
ρ = [3.1622777]
X = [ 0.13548481   0.4817255   -0.21452428  -0.44248414  -0.61911714  -0.20058434  0.03303163 -0.28729427 -0.02357225  0.00682655;
      0.6207463    0.36463284   0.49649885   0.35454512  -0.00214678   0.18210712 -0.14758368 -0.15433443  0.0728533   0.15946195;
     -0.21350645  -0.15359363   0.5327023   -0.4102227   -0.17911321   0.4056255   0.38531926  0.0325688  -0.0123829   0.3639657;
      0.24113904   0.22427274  -0.23366982   0.12668109  -0.02957939   0.33789852  0.6349779   0.37231797 -0.13871586 -0.38051832;
      0.15568212  -0.04542675   0.11859692   0.08123261   0.14283347  -0.73043334  0.5489033   0.04761133  0.09993154  0.2924948;
     -0.09714203   0.02691907   0.54013526  -0.16470742  -0.09698496  -0.26562178 -0.08258715  0.19775781  0.24816477 -0.6953335;
      0.49915072  -0.7382655   -0.08902144   0.00219047  -0.42142862   0.01898566 -0.00406301 -0.05398126  0.08030836 -0.10266586;
      0.07047089  -0.1012426    0.20211887  -0.07659055   0.13268787  -0.12938657  0.02935    -0.29455936 -0.87895095 -0.20865588;
      0.25563884  -0.03505342  -0.11245565  -0.44889158   0.5586415    0.14277709  0.1474613  -0.47970754  0.31259418 -0.19293821;
      0.37341985   0.04232063  -0.04313283  -0.5030636    0.21595514  -0.079505   -0.30776966  0.62672806 -0.16263413  0.1921339]
B2 = reshape([0.3363144; 0.17910989; 1.1278634], 3, 1)
D12 = reshape([-0.7799178; -0.538826; 0.81749386; 0.18730423], 4, 1)
Y1 = [-0.50848085 -0.33799705 -0.2521678;
       0.39725217 -0.78257567 -0.10030559;
       0.07264674 -0.56411165 -0.14618215]
C2 = [-0.6801615  -1.0584244   0.67989236;
       0.5825787  -1.3854479  -0.09450169]
D21 = [-0.73828894 -0.6964711   0.01450452  0.11366303;
        0.46254438  0.32742077 -0.45802078  0.16899452]
D22 = reshape([-0.7625085; -0.2346918], 2, 1)
X3 = reshape([1.0], 1, 1)
Y3 = reshape([0.0], 1, 1)
Z3 = reshape([0.0], 1, 1)
bx = [-0.8407542, 0.344241, -0.8005765]
bv = [-0.5027406, -0.33219278, -0.74284524, 0.53772825]
by = [-0.05653925, 1.5046232]

T = Float32
ϵ = T(1e-12)

direct_ps = DirectRENParams{T}(
    X, 
    Y1, X3, Y3, Z3, 
    B2, C2, D12, D21, D22,
    bx, bv, by, ϵ, ρ,
    true, true, false,
    false
)

nu, nx, nv, ny = 1, 3, 4, 2

Q = [-1.7727344  1.0791185;
     1.0791185 -3.7732368]
S = [ 0.83502996 -0.16566703]
R = reshape([1.8399353], 1, 1)

Q = Q - ϵ*I
Q, S, R = T.(Q), T.(S), T.(R)
LQ = Matrix{T}(cholesky(-Q).U)
R1 = Hermitian(R - S * (Q \ S'))
LR = Matrix{T}(cholesky(R1).U) 

ren_ps = GeneralRENParams{T}(tanh, nu, nx, nv, ny, direct_ps, T(1), Q, S, R, LQ, LR)
ren = REN(ren_ps)

batches = 4
rng = Xoshiro(42)
x0 = init_states(ren, batches; rng) .+ 1
u0 = ones(ren.nu, batches)

# Evaluate the REN over one timestep
x1, y1 = ren(x0, u0)
println(x1)
println(y1)

function loss(states, inputs)
    model = REN(ren_ps)
    nstate, out = model(states, inputs)
    return sum(nstate.^2) + sum(out.^2)
end

gs = gradient(loss, x0, u0)
loss_val = loss(x0, u0)
println(loss_val)
println("States grad: ", gs[1])
println("Output grad: ", gs[2])
